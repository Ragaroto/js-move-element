function Actor () {
  if(typeof Actor.instance === "object"){
    return Actor.instance;
  }

  this.element  = document.getElementById("actor");
}
 
/**
 * Get Axis the Actor element
 * @param  {String} axis
 * @return {Inter}
 */
Actor.prototype.getAxis = function(axis) {
  if(axis === "x"){
    return this.element.offsetLeft + ( this.element.offsetWidth / 2 );
  }
  if(axis === "y"){
    return this.element.offsetTop;
  }
};

Actor.prototype.moveShortToTop = function() {
  var increase = this.getAxis('y') - 5;
  
  this.changeClass('rotate-to-up');
  this.element.style.top = increase + "px";
};

Actor.prototype.moveShortToDown = function() {
  var decrements = this.getAxis('y') + 5 ;

  this.changeClass('rotate-to-down');
  this.element.style.top = decrements + "px";
};

Actor.prototype.moveShortToLeft = function() {
  var increase = this.getAxis('x') - 5; 

  this.changeClass('rotate-to-left');
  this.element.style.left = increase + "px";
};

Actor.prototype.moveShortToRight = function() {
  var decrements = this.getAxis('x') + 5;

  this.changeClass('rotate-to-right');
  this.element.style.left = decrements + "px";
};

Actor.prototype.changeClass = function(newValue) {
  var 
    classReg = new RegExp(newValue),
    oldClass = this.element.className,
    newClass = ""; 

    //Verify if newClass existe
    if( ! classReg.test(oldClass) ) {
      //Remove All class with started 'rotate-'
      newClass = oldClass.replace(/ rotate.*/,"");

      //New string class
      newClass += " " + newValue;
      
      this.element.className = newClass;
    }

};


;function Controller () {
	if(typeof Controller.instance === "object"){
		return Controller.instance;
	}

	this.actor = new Actor();
	this.keysMoveActor = [
		37, // left
		38, // up
		39, // right
		40  // down
	];
}


Controller.prototype.moveActor = function() {
	self = this;
	window.onkeydown = function(e){
		switch(e.keyCode){

			//left
			case self.keysMoveActor[0]:
				self.actor.moveShortToLeft();
			break;

			//up
			case self.keysMoveActor[1]:
				self.actor.moveShortToTop();
			break;

			// right
			case self.keysMoveActor[2]:
				self.actor.moveShortToRight();
			break;

			// down
			case self.keysMoveActor[3]:
				self.actor.moveShortToDown();				
			break;
		}


	
	};
};;function View () {
	this.controller = new Controller();
}

View.prototype.init = function() {
	this.controller.moveActor();
};;window.onload = function (argument) {
	var game = new View().init();
};
